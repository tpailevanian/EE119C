----------------------------------------------------------------------------
--
--  FIR Filter Test Bed
--
--  This is the test bench for the FIR Filter block.

-- 	This test bench takes an excitation source generated by Matlab and 
--	converts it to a standard logic vector. The test bench generates the
--	data ready signal. The test bench compares the expected filter output
--	to the generated output and throws an error if they do not match.
--
--  Revision History:
--     2017-05-20   Torkom P.   Initial Revision
--	   2017-05-21	Torkom P. 	Added read from text capabilities
--	   2017-06-05	Torkom P. 	Added standard match test to data output
--
----------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_textio.all;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_SIGNED.ALL;

use std.textio.all;

library txt_util;
use txt_util.txt_util.all;

entity fir_tb is
end fir_tb;

architecture fir_tb_arch of fir_tb is

	component fir is
		Port(
			dataIn  : in  std_logic_vector(15 downto 0); -- Asynchronous data from the SPI interface
			dataRdy : in  std_logic;    -- Asynchronous data ready signal from the SPI interface
			sysclk  : in  std_logic;    -- System clock 
			RESET   : in  std_logic;    -- Global Reset signal

			dataOut : out signed(17 downto 0) -- Filter Output 
		);

	end component;

	signal clock : std_logic;           -- system clock into the spi block
	signal reset : std_logic;			-- Global  Reset signal
	signal dataIn   : std_logic_Vector(15 downto 0); -- Asynchronous data from the SPI interface
	signal dataRdy : std_logic;        -- Asynchronous data ready signal from the SPI interface

	signal dataOut : signed(17 downto 0); -- Filter Output

	signal END_SIM : BOOLEAN := FALSE;

begin
	UUT : fir
		port map(
			dataIn => dataIn,
			dataRdy => dataRdy,
			sysclk => clock,
			RESET => reset,

			dataOut => dataOut
		);

	process
		
		-- The waveform file contains the simulated ADC input data
	    file waveform_file : text is in "C:\Users\Torkom\Dropbox\Caltech\EE 119\Project\Filter_Design\Matlab_Scripts\bindata.txt";
	    -- The filtered file contains the expected filter output data
	    file filtered_file : text is in "C:\Users\Torkom\Dropbox\Caltech\EE 119\Project\Filter_Design\Matlab_Scripts\binfiltered.txt";
	    -- The firOutput file contains the actual filtered data generated by the filter
	    file firOutput_file : text open write_mode is "C:\Users\Torkom\Dropbox\Caltech\EE 119\Project\Filter_Design\Matlab_Scripts\firOutput.txt";
	    
		variable dataLine : line; -- This contains one line from the data 
		variable filteredLine : line; -- This contains one line from the expected filtered output
		variable outputLine : line; -- This contains the output of the FIR filter
	 
	 	variable inputData		:  string(1 to 16); -- Input data from the file
	 	variable outputData		:  string(1 to 16);	-- Generated output data

	begin
		wait for 1 ns; -- offset to misalign the deserializer inputs and the system clock

		while not endfile(waveform_file) loop 
			
			dataRdy <= '0'; -- Clear the data ready flag
			
			-- Read one line into the test bench
		    readline(waveform_file, dataLine);	
		    readline(filtered_file, filteredLine);
		        
		    -- This will read the values into the signals from the file 
		    read(dataLine, inputData);        -- Data input to the filter
		    read(filteredLine, outputData);    -- Expected output of the filter
			  
			dataIn <= to_std_logic_vector(inputData(1 to 16));
			
			wait for 50 ns;  -- Simulate the conversion period
			
			dataRdy <= '1';  -- Set the data ready flag so the filter aquires the new input
				
			wait for 150 ns; -- Filter delay period
			
			-- See if result is the same.
			assert(std_match(to_std_logic_vector(outputData(1 to 16)), std_logic_vector(dataOut)))    
		    	report  "result incorrect"
		    	severity  ERROR;

		    -- Print the result to a file for post processing
			print(firOutput_file, hstr(std_logic_vector(dataOut)));
			 
	    end loop;

		END_SIM <= TRUE;
		wait;
	end process;

	CLOCK_CLK : process
	begin
		-- this process generates a 2.5 ns period, 50% duty cycle clock

		-- only generate clock if still simulating

		if END_SIM = FALSE then
			clock <= '0';
			wait for 1.25 ns;
		else
			wait;
		end if;

		if END_SIM = FALSE then
			clock <= '1';
			wait for 1.25 ns;
		else
			wait;
		end if;

	end process;
end fir_tb_arch;
