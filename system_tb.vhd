----------------------------------------------------------------------------
--
--  System Test Bed
--
--  This is the test bench for the Transducer Array.

--	This test bench takes an excitation source generated by Matlab and 
--	converts it to a standard logic vector. The system generates a clock
--	signal which is used to send the excitation data MSB first bit by bit.
--	The test bench also generates a phase matched clock signal which is used
--	by the SPI deserializer to parse the inputs. The test bench compares 
--	the expected filter output to the generated output and throws an error 
--	if they do not match.
--
--  Revision History:
--     2017-06-11   Torkom P.   Initial Revision
--
----------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_textio.all;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_SIGNED.ALL;

use std.textio.all;

library txt_util;
use txt_util.txt_util.all;

entity system_tb is
end system_tb;

architecture system_tb_arch of system_tb is
 
    component system is
    Port ( 
		sysclk      : in    std_logic; 			-- system clock
	
		sdoa        : in    std_logic; 			-- SPI data line for ADC Channel A
		sdob        : in    std_logic; 			-- SPI data line for ADC Channel B
		sdoc        : in    std_logic; 			-- SPI data line for ADC Channel C
		sdod        : in    std_logic; 			-- SPI data line for ADC Channel D
		sck_in      : in    std_logic; 			-- Phase adjusted SCK signal from ADC
		
		conv 		: out   std_logic := '0'; 	-- Trigger for ADC to sample
		sck_out     : out   std_logic := '0'; 	-- SPI Clock output to the ADC
		
		RESET		: in 	std_logic;			-- Global Reset signal
	        
	    cha_dataOut : out   signed(17 downto 0); -- 16bit filtered data for ADC Channel A
	    chb_dataOut : out   signed(17 downto 0); -- 16bit filtered data for ADC Channel B
	    chc_dataOut : out   signed(17 downto 0); -- 16bit filtered data for ADC Channel C
	    chd_dataOut : out   signed(17 downto 0)  -- 16bit filtered data for ADC Channel D
        
    ); 
	end component;

    signal clock       	: std_logic; -- system clock 
        
    signal sdoa        : std_logic := '0'; -- SPI data line for ADC Channel A
    signal sdob        : std_logic := '0'; -- SPI data line for ADC Channel B
    signal sdoc        : std_logic := '0'; -- SPI data line for ADC Channel C
    signal sdod        : std_logic := '0'; -- SPI data line for ADC Channel D
    signal sck_in      : std_logic := '0'; -- Phase adjusted SCK signal from ADC
		
	signal sck_out     : std_logic := '0'; -- SPI Clock output to the ADC
	
	signal cha_dataOut 	: signed(17 downto 0); -- 16bit filtered data for ADC Channel A
    signal chb_dataOut 	: signed(17 downto 0); -- 16bit filtered data for ADC Channel B
    signal chc_dataOut 	: signed(17 downto 0); -- 16bit filtered data for ADC Channel C
    signal chd_dataOut 	: signed(17 downto 0); -- 16bit filtered data for ADC Channel D
	 
	signal conv 		: std_logic := '0'; -- Trigger for ADC to sample
	
	signal RESET		: std_logic := '1'; -- Global Reset signal
	 
    signal END_SIM : BOOLEAN := FALSE; -- Variable to stop clock generation


begin
  UUT : system
    port map (
	    sysclk => clock,
		
		sdoa => sdoa,
		sdob => sdob,
		sdoc => sdoc,
		sdod => sdod,
		sck_in => sck_in,
		
		conv => conv,
		sck_out => sck_out,
		
		RESET => RESET,
	        
	    cha_dataOut => cha_dataOut,
	    chb_dataOut => chb_dataOut,
	    chc_dataOut => chc_dataOut,
	    chd_dataOut => chd_dataOut
    );


  process
  	
  	-- The test file contains the IR, OperandA, OperandB, SR and Result 
    --  on a signle line for each operation 
    file waveform_file : text is in "C:\Users\Torkom\Dropbox\Caltech\EE 119\Project\Filter_Design\Matlab_Scripts\bindata.txt";
    file filtered_file : text is in "C:\Users\Torkom\Dropbox\Caltech\EE 119\Project\Filter_Design\Matlab_Scripts\binfiltered.txt";
    file firOutput_file : text open write_mode is "C:\Users\Torkom\Dropbox\Caltech\EE 119\Project\Filter_Design\Matlab_Scripts\firOutput.txt";
    
	variable dataLine : line; -- This contains one line from the excitation data file
	variable filteredLine : line; -- This contains one line from the expected filtered output file
 
 	variable inputData		:  string(1 to 16); -- Input data from the file (string format)
 	variable outputData		:  string(1 to 16);	-- Generated output data (string format)

  begin
 
		wait for 1.25 ns; -- half a clock period (400 MHz)
		

		-- Keep looping until all of the input data has been sent through the test bench
		while not endfile(waveform_file) loop 
			
	        
	        -- Read one line into the test bench
	        readline(waveform_file, dataLine);	
	        readline(filtered_file, filteredLine);
	            
	        -- This will read the values into the signals from the file 
	        read(dataLine, inputData);        -- Data input to the filter
	        read(filteredLine, outputData);   -- Expected output of the filter

	        -- Loop through each vector one bit at a time
	        for i in 15 downto 0 loop
		 	
		 		-- Wait until the SCK clock line is driver high by the FPGA to send
		 		--   data to the output
				wait until sck_out = '1';
				sdoa <= to_std_logic_vector(inputData(1 to 16))(i);
				sdob <= to_std_logic_vector(inputData(1 to 16))(i);
				sdoc <= to_std_logic_vector(inputData(1 to 16))(i);
				sdod <= to_std_logic_vector(inputData(1 to 16))(i);
				
				-- Generate the phase matched SCK clock
				--   (simulated by a wait statement)
				--   Data is already valid on the output at this point
				wait for 3 ns;
				sck_in <= '1';
				
				-- Generate the phase matched SCK clock 
				--   (simulated by a wait statement)
				wait until sck_out = '0';
				wait for 3 ns;
				sck_in <= '0';
		
			end loop;
              
	        -- Make sure the filter output and the expected output are the same
			assert(std_match(std_logic_vector(cha_dataOut), to_std_logic_vector(outputData(1 to 16))))    -- See if result is the same.
			    report  "Filter Output Incorrect"
			    severity  ERROR;

			-- Print filter output to a file for post processing
	        print(firOutput_file, hstr(std_logic_vector(cha_dataOut)));
	         
	    end loop;
		   
    END_SIM <= TRUE;
    wait;
  end process;

  CLOCK_CLK : process

  begin

      -- this process generates a 2.5 ns period, 50% duty cycle clock

      -- only generate clock if still simulating

      if END_SIM = FALSE then
          clock <= '0';
          wait for 1.25 ns;
      else
          wait;
      end if;

      if END_SIM = FALSE then
          clock <= '1';
          wait for 1.25 ns;
      else
          wait;
      end if;

  end process;
end system_tb_arch;